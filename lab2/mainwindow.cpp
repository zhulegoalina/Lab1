#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QFileDialog>
#include <QMessageBox>
#include <QHeaderView>
#include <QFile>
#include <QTextStream>
#include <QtConcurrent>
#include <QLabel>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    setWindowTitle("Image Metadata Analyzer");
    loadStyles();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers = {
        "–ò–º—è —Ñ–∞–π–ª–∞",
        "–†–∞–∑–º–µ—Ä (–ø–∏–∫—Å–µ–ª–∏)",
        "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ (DPI)",
        "–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞",
        "–°–∂–∞—Ç–∏–µ",
        "–§–æ—Ä–º–∞—Ç"
    };
    ui->tableWidget->setColumnCount(headers.size());
    ui->tableWidget->setHorizontalHeaderLabels(headers);
    ui->tableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    ui->tableWidget->setSortingEnabled(true);
    ui->tableWidget->setAlternatingRowColors(true);
    ui->tableWidget->setSelectionBehavior(QAbstractItemView::SelectRows);
    ui->tableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);

    ui->stopButton->setObjectName("stopButton");
    ui->statusLabel->setText("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

    // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    connect(&m_futureWatcher, &QFutureWatcher<void>::finished,
            this, &MainWindow::analysisFinished);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::loadStyles()
{
    QFile styleFile(":/styles.qss");
    if (styleFile.open(QFile::ReadOnly)) {
        QString style = QLatin1String(styleFile.readAll());
        this->setStyleSheet(style);
    }
}

void MainWindow::on_browseButton_clicked()
{
    QString folder = QFileDialog::getExistingDirectory(this, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏");
    if (!folder.isEmpty()) {
        ui->folderLineEdit->setText(folder);
        ui->analyzeButton->setEnabled(true);
        ui->searchText->clear();
        ui->statusLabel->setText("–ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: " + folder);
    }
}

void MainWindow::on_analyzeButton_clicked()
{
    QString folder = ui->folderLineEdit->text();
    if (folder.isEmpty()) {
        QMessageBox::warning(this, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.");
        return;
    }

    if (!QDir(folder).exists()) {
        QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        return;
    }

    m_stopRequested = false;
    m_results.clear();
    m_filteredResults.clear();
    ui->tableWidget->setRowCount(0);
    ui->analyzeButton->setEnabled(false);
    ui->stopButton->setEnabled(true);
    ui->progressBar->setVisible(true);
    ui->progressBar->setValue(0);
    ui->searchText->clear();

    m_timer.start();
    ui->statusLabel->setText("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...");

    ImageAnalyzer *analyzer = new ImageAnalyzer(this);
    connect(analyzer, &ImageAnalyzer::progressUpdated, this, &MainWindow::progressUpdated);
    connect(analyzer, &ImageAnalyzer::resultReady, this, &MainWindow::resultReady);
    connect(analyzer, &ImageAnalyzer::finished, analyzer, &ImageAnalyzer::deleteLater);

    QFuture<void> future = QtConcurrent::run([this, analyzer, folder]() {
        analyzer->analyzeFolder(folder, &m_stopRequested);
    });

    m_futureWatcher.setFuture(future);
}

void MainWindow::on_stopButton_clicked()
{
    m_stopRequested = true;
    ui->stopButton->setEnabled(false);
    ui->statusLabel->setText("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...");
}

void MainWindow::on_searchText_textChanged(const QString &text)
{
    applyFilter(text);
}

void MainWindow::progressUpdated(int value, const QString &status)
{
    ui->progressBar->setValue(value);
    ui->statusLabel->setText(status);
}


void MainWindow::on_tableWidget_cellDoubleClicked(int row, int column)
{
    Q_UNUSED(column)
    showDetails(row);
}

void MainWindow::updateTable()
{
    ui->tableWidget->setSortingEnabled(false);
    ui->tableWidget->setRowCount(m_filteredResults.size());

    int row = 0;
    for (auto it = m_filteredResults.constBegin(); it != m_filteredResults.constEnd(); ++it) {
        const ImageMetadata &metadata = it.value();

        QTableWidgetItem *fileItem = new QTableWidgetItem(metadata.filename);
        QTableWidgetItem *sizeItem = new QTableWidgetItem(metadata.size);
        QTableWidgetItem *resolutionItem = new QTableWidgetItem(metadata.resolution);
        QTableWidgetItem *colorItem = new QTableWidgetItem(metadata.colorDepth);
        QTableWidgetItem *compressionItem = new QTableWidgetItem(metadata.compression);
        QTableWidgetItem *formatItem = new QTableWidgetItem(metadata.format);

        for (QTableWidgetItem* item : {fileItem, sizeItem, resolutionItem, colorItem, compressionItem, formatItem}) {
            item->setForeground(Qt::black);
            if (!metadata.error.isEmpty()) {
                item->setBackground(QColor(255, 200, 200));
                item->setToolTip(metadata.error);
            }
        }

        ui->tableWidget->setItem(row, 0, fileItem);
        ui->tableWidget->setItem(row, 1, sizeItem);
        ui->tableWidget->setItem(row, 2, resolutionItem);
        ui->tableWidget->setItem(row, 3, colorItem);
        ui->tableWidget->setItem(row, 4, compressionItem);
        ui->tableWidget->setItem(row, 5, formatItem);

        row++;
    }

    ui->tableWidget->setSortingEnabled(true);
}

void MainWindow::showDetails(int row)
{
    if (row < 0 || row >= ui->tableWidget->rowCount()) return;

    QString filename = ui->tableWidget->item(row, 0)->text();
    if (!m_filteredResults.contains(filename)) return;

    const ImageMetadata &metadata = m_filteredResults[filename];

    QString details = "–ú–ï–¢–ê–î–ê–ù–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø\n\n";

    details += "–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n";
    details += "–§–∞–π–ª: " + metadata.filename + "\n";
    details += "–†–∞–∑–º–µ—Ä: " + metadata.size + " –ø–∏–∫—Å–µ–ª–µ–π\n";
    details += "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: " + metadata.resolution + "\n";
    details += "–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: " + metadata.colorDepth + "\n";
    details += "–°–∂–∞—Ç–∏–µ: " + metadata.compression + "\n";
    details += "–§–æ—Ä–º–∞—Ç: " + metadata.format + "\n\n";

    QString formatInfo = getAdditionalInfo(metadata.format, metadata.filepath);
    if (!formatInfo.isEmpty()) {
        details += "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–û–†–ú–ê–¢–ï:\n";
        details += formatInfo + "\n\n";
    }

    if (!metadata.error.isEmpty()) {
        details += "–û–®–ò–ë–ö–ê:\n";
        details += metadata.error + "\n";
    }

    ui->detailsTextEdit->setPlainText(details);
}

void MainWindow::applyFilter(const QString &filter)
{
    m_filteredResults.clear();

    if (filter.isEmpty()) {
        m_filteredResults = m_results;
    } else {
        for (auto it = m_results.constBegin(); it != m_results.constEnd(); ++it) {
            if (it.key().contains(filter, Qt::CaseInsensitive) ||
                it.value().format.contains(filter, Qt::CaseInsensitive)) {
                m_filteredResults[it.key()] = it.value();
            }
        }
    }

    updateTable();
    ui->statusLabel->setText(QString("–ù–∞–π–¥–µ–Ω–æ: %1 —Ñ–∞–π–ª–æ–≤").arg(m_filteredResults.size()));
}

void MainWindow::updateStatistics()
{
    QString statsText;

    if (m_results.isEmpty()) {
        statsText = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞";
    } else {
        statsText = "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê\n";
        statsText += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        QMap<QString, int> formatStats;
        QMap<QString, qint64> formatSizes;
        qint64 totalSize = 0;
        QVector<QString> largestFiles;
        QVector<qint64> largestSizes;

        for (const ImageMetadata &metadata : m_results) {
            formatStats[metadata.format]++;
            QFileInfo fileInfo(metadata.filepath);
            qint64 fileSize = fileInfo.size();
            totalSize += fileSize;
            formatSizes[metadata.format] += fileSize;

            // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            largestFiles.append(metadata.filename);
            largestSizes.append(fileSize);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –ø–µ—Ä–≤—ã–µ)
        for (int i = 0; i < largestSizes.size() - 1; ++i) {
            for (int j = i + 1; j < largestSizes.size(); ++j) {
                if (largestSizes[j] > largestSizes[i]) {
                    std::swap(largestSizes[i], largestSizes[j]);
                    std::swap(largestFiles[i], largestFiles[j]);
                }
            }
        }

        statsText += QString("üìÅ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n");
        statsText += QString("‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: %1\n").arg(m_results.size());
        statsText += QString("‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: %1\n").arg(formatFileSize(totalSize));
        statsText += QString("‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %1\n\n").arg(formatFileSize(totalSize / m_results.size()));

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        statsText += QString("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –§–û–†–ú–ê–¢–ê–ú:\n");
        for (auto it = formatStats.constBegin(); it != formatStats.constEnd(); ++it) {
            double percentage = (it.value() * 100.0) / m_results.size();
            double sizePercentage = (formatSizes[it.key()] * 100.0) / totalSize;
            statsText += QString("‚Ä¢ %1: %2 —Ñ–∞–π–ª–æ–≤ (%3%) - %4 (%5%)\n")
                             .arg(it.key())
                             .arg(it.value())
                             .arg(percentage, 0, 'f', 1)
                             .arg(formatFileSize(formatSizes[it.key()]))
                             .arg(sizePercentage, 0, 'f', 1);
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        int smallImages = 0, mediumImages = 0, largeImages = 0, hugeImages = 0;
        int maxWidth = 0, maxHeight = 0;
        QString largestImage;

        for (const ImageMetadata &metadata : m_results) {
            QStringList dimensions = metadata.size.split(" √ó ");
            if (dimensions.size() == 2) {
                int width = dimensions[0].toInt();
                int height = dimensions[1].toInt();
                int totalPixels = width * height;

                if (totalPixels < 100000) smallImages++;
                else if (totalPixels < 1000000) mediumImages++;
                else if (totalPixels < 10000000) largeImages++;
                else hugeImages++;

                // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (width * height > maxWidth * maxHeight) {
                    maxWidth = width;
                    maxHeight = height;
                    largestImage = metadata.filename;
                }
            }
        }

        statsText += QString("\nüñºÔ∏è  –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ó–ú–ï–†–ê–ú:\n");
        statsText += QString("‚Ä¢ –ú–∞–ª—ã–µ (< 100K –ø–∏–∫—Å–µ–ª–µ–π): %1 —Ñ–∞–π–ª–æ–≤\n").arg(smallImages);
        statsText += QString("‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ (100K-1M –ø–∏–∫—Å–µ–ª–µ–π): %1 —Ñ–∞–π–ª–æ–≤\n").arg(mediumImages);
        statsText += QString("‚Ä¢ –ë–æ–ª—å—à–∏–µ (1M-10M –ø–∏–∫—Å–µ–ª–µ–π): %1 —Ñ–∞–π–ª–æ–≤\n").arg(largeImages);
        statsText += QString("‚Ä¢ –û–≥—Ä–æ–º–Ω—ã–µ (> 10M –ø–∏–∫—Å–µ–ª–µ–π): %1 —Ñ–∞–π–ª–æ–≤\n").arg(hugeImages);
        statsText += QString("‚Ä¢ –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ: %1 (%2 √ó %3 –ø–∏–∫—Å–µ–ª–µ–π)\n").arg(largestImage).arg(maxWidth).arg(maxHeight);

        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        qint64 elapsed = m_timer.elapsed();
        if (elapsed > 0) {
            double speed = m_results.size() / (elapsed / 1000.0);
            statsText += QString("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:\n");
            statsText += QString("‚Ä¢ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: %1 —Å–µ–∫.\n").arg(elapsed / 1000.0, 0, 'f', 2);
            statsText += QString("‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: %1 —Ñ–∞–π–ª–æ–≤/—Å–µ–∫.\n").arg(speed, 0, 'f', 2);
            statsText += QString("‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª: %1 –º—Å\n").arg((double)elapsed / m_results.size(), 0, 'f', 1);
        }
    }

    // –í—ã–≤–æ–¥–∏–º –≤ QLabel –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    QWidget* statsTab = ui->tabWidget->widget(1);
    if (statsTab) {
        QLabel* statsLabel = statsTab->findChild<QLabel*>();
        if (statsLabel) {
            statsLabel->setText(statsText);
            statsLabel->setWordWrap(true);
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–≤–æ–¥
            ui->detailsTextEdit->setPlainText(statsText);
        }
    }
}


void MainWindow::resultReady(const QString &filename, const ImageMetadata &metadata)
{
    m_results[filename] = metadata;

    if (ui->searchText->text().isEmpty() ||
        filename.contains(ui->searchText->text(), Qt::CaseInsensitive)) {
        m_filteredResults[filename] = metadata;
        updateTable();
    }

    ui->statusLabel->setText(QString("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %1 —Ñ–∞–π–ª–æ–≤").arg(m_results.size()));
    updateStatistics();
}

void MainWindow::analysisFinished()
{
    ui->analyzeButton->setEnabled(true);
    ui->stopButton->setEnabled(false);

    qint64 elapsed = m_timer.elapsed();
    QString status = QString("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª–æ–≤: %1. –í—Ä–µ–º—è: %2 —Å–µ–∫.")
                         .arg(m_results.size())
                         .arg(elapsed / 1000.0, 0, 'f', 1);

    ui->statusLabel->setText(status);
    updateStatistics();
}

QString MainWindow::formatFileSize(qint64 bytes)
{
    if (bytes < 1024) return QString("%1 –±–∞–π—Ç").arg(bytes);
    else if (bytes < 1024 * 1024) return QString("%1 –ö–ë").arg(bytes / 1024.0, 0, 'f', 1);
    else if (bytes < 1024 * 1024 * 1024) return QString("%1 –ú–ë").arg(bytes / (1024.0 * 1024.0), 0, 'f', 1);
    else return QString("%1 –ì–ë").arg(bytes / (1024.0 * 1024.0 * 1024.0), 0, 'f', 1);
}
QString MainWindow::getAdditionalInfo(const QString &format, const QString &filePath)
{
    QString additional;

    if (format == "JPG" || format == "JPEG") {
        additional = "–¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: YCbCr";
    } else if (format == "PNG") {
        QImage image(filePath);
        if (!image.isNull()) {
            additional = QString("–ö–∞–Ω–∞–ª–æ–≤: %1").arg(image.isGrayscale() ? "1" : "3-4");
        }
    } else if (format == "GIF") {
        additional = "–ü–∞–ª–∏—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (256 —Ü–≤–µ—Ç–æ–≤)";
    } else if (format == "BMP") {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è BMP
        QFile file(filePath);
        if (file.open(QIODevice::ReadOnly)) {
            QDataStream stream(&file);
            stream.setByteOrder(QDataStream::LittleEndian);

            // –ß–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É "BM"
            char signature[2];
            stream.readRawData(signature, 2);

            if (signature[0] == 'B' && signature[1] == 'M') {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                stream.skipRawData(8);

                // –ß–∏—Ç–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–æ –¥–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
                quint32 dataOffset;
                stream >> dataOffset;

                // –ß–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
                quint32 headerSize;
                stream >> headerSize;

                QString bmpType;
                if (headerSize == 12) {
                    bmpType = "BITMAPCOREHEADER (OS/2 1.x)";
                } else if (headerSize == 40) {
                    bmpType = "BITMAPINFOHEADER (Windows 3.x+)";
                } else if (headerSize == 108) {
                    bmpType = "BITMAPV4HEADER";
                } else if (headerSize == 124) {
                    bmpType = "BITMAPV5HEADER";
                } else {
                    bmpType = QString("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (%1 –±–∞–π—Ç)").arg(headerSize);
                }

                additional = QString("–¢–∏–ø BMP: %1 | –°–º–µ—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: %2 –±–∞–π—Ç")
                                 .arg(bmpType).arg(dataOffset);
            } else {
                additional = "–ù–µ–≤–µ—Ä–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ BMP";
            }
            file.close();
        } else {
            additional = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞";
        }
    }

    return additional;
}
